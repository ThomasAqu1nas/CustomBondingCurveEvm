{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-74f118d130413acb445e7c7edbb44bba6838fa89",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/src/core/SmthTokenFactory.sol": "project/contracts/src/core/SmthTokenFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/src/core/SmthToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title SmthToken\n/// @notice Fixed-supply ERC20-like token: the full supply is minted to the factory at deployment.\n///         No further minting is allowed.\ncontract SmthToken is IERC20, IERC20Metadata, IERC20Errors, Context {\n    string private _name;\n    string private _symbol;\n    uint8  private _decimals = 18;\n\n    uint256 private _totalSupply;\n    uint8 private _minted;\n    address public factory;\n\n\n    error SmthToken__AlreadyMinted();\n\n    modifier MintOnce() {\n        if (_minted != 0) revert SmthToken__AlreadyMinted();\n        _minted = 255;\n        _;\n    }\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Only factory\");\n        _;\n    }\n\n    constructor(string memory name_, string memory symbol_, uint256 totalSupply_) {\n        _name = name_;\n        _symbol = symbol_;\n        factory = msg.sender;\n        _mint(factory, totalSupply_); // Mint full supply to the factory\n    }\n\n    // ---- Metadata ----\n    function name() external view returns (string memory) { return _name; }\n    function symbol() external view returns (string memory) { return _symbol; }\n    function decimals() external view returns (uint8) { return _decimals; }\n\n    // ---- ERC20 Views ----\n    function totalSupply() external view returns (uint256) { return _totalSupply; }\n    function balanceOf(address account) public view returns (uint256) { return _balances[account]; }\n    function allowance(address owner, address spender) public view returns (uint256) { return _allowances[owner][spender]; }\n\n    // ---- ERC20 Writes ----\n    function approve(address spender, uint256 value) external returns (bool) {\n        _approve(_msgSender(), spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(_msgSender(), to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _spendAllowance(from, _msgSender(), value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // ---- Internals ----\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) revert ERC20InvalidSender(address(0));\n        if (to   == address(0)) revert ERC20InvalidReceiver(address(0));\n        _update(from, to, value);\n    }\n\n    function _mint(address to, uint256 value) internal MintOnce {\n        if (to == address(0)) revert ERC20InvalidReceiver(address(0));\n        _update(address(0), to, value);\n    }\n\n    function _update(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            _totalSupply += value;\n        } else {\n            uint256 fb = _balances[from];\n            if (fb < value) revert ERC20InsufficientBalance(from, fb, value);\n            unchecked { _balances[from] = fb - value; }\n        }\n\n        if (to == address(0)) {\n            unchecked { _totalSupply -= value; }\n        } else {\n            unchecked { _balances[to] += value; }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal { _approve(owner, spender, value, true); }\n\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal {\n        if (owner  == address(0)) revert ERC20InvalidApprover(address(0));\n        if (spender== address(0)) revert ERC20InvalidSpender(address(0));\n        _allowances[owner][spender] = value;\n        if (emitEvent) emit Approval(owner, spender, value);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 value) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            unchecked { _approve(owner, spender, currentAllowance - value, false); }\n        }\n    }\n}\n"
      },
      "project/contracts/src/core/SmthTokenFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IUniswapV2Router02} from \"../uniswap-v2/periphery/interfaces/IUniswapV2Router02.sol\";\nimport {SmthToken} from \"./SmthToken.sol\";\nimport {ISmthTokenFactory} from \"../interfaces/ISmthTokenFactory.sol\";\nimport {FixedPointMathLib} from \"../../../lib/FixedPointMathLib.sol\";\nimport {UniswapV2Library} from \"../uniswap-v2/libraries/UniswapV2Library.sol\";\n\n/// @title SmthTokenFactory\n/// @notice Bonding-curve trading with fixed-supply token, partial-fill buys, and delayed migration to Uniswap V2.\ncontract SmthTokenFactory is ISmthTokenFactory, Ownable, ReentrancyGuard {\n    using FixedPointMathLib for uint256;\n    using SafeERC20 for IERC20;\n\n\n    // ------------- Storage -------------\n    mapping(address => TokenInfo) private tokens; // token => info\n\n    address private _uniswapRouter;\n    address private _uniswapV2Factory;\n    address private _WETH;\n    uint256 private _totalFee;\n    Config  private _config;\n\n    // ------------- Constructor / Admin -------------\n    constructor(address router_, address uniswapV2Factory_) Ownable(_msgSender()) {\n        if (router_ == address(0)) revert SmthTokenFactory__ZeroAddress();\n        _uniswapRouter = router_;\n        _uniswapV2Factory = uniswapV2Factory_;\n        _WETH = IUniswapV2Router02(router_).WETH();\n\n        setConfig(\n            1_000_000_000 ether,    // total supply (18 decimals)\n            62_500_000_000_000_000, // migrationFeeNumerator = 0.0625 WAD (example)\n            100,                    // trade fee = 1% (BPS)\n            10_000,                 // denominator\n            18                      // token decimals (display)\n        );\n    }\n\n    function setConfig(\n        uint256 totalSupply_,\n        uint256 migrationFeeNumerator_,   // WAD fraction in [0..1e18)\n        uint256 tradeFeeBpsNumerator_,    // BPS (0..10000)\n        uint256 bpsDenominator_,          // usually 10_000\n        uint256 tokenDecimals_            // 18\n    ) public onlyOwner {\n        if (bpsDenominator_ == 0) revert SmthTokenFactory_InvalidBpsDenominator(bpsDenominator_);\n        _config = Config({\n            totalSupply: totalSupply_,\n            migrationFeeNumerator: migrationFeeNumerator_,\n            tradeFeeBpsNumerator: tradeFeeBpsNumerator_,\n            defaultBpsDenominator: bpsDenominator_,\n            tokenDecimals: tokenDecimals_,\n            isInitialized: true\n        });\n    }\n\n    // ------------- Views -------------\n    function tokenInfo(address token) external view override returns (TokenInfo memory) { return tokens[token]; }\n    function uniswapRouter() external view override returns (address) { return _uniswapRouter; }\n    function uniswapV2Factory() external view override returns (address) { return _uniswapV2Factory; }\n    function WETH() external view override returns (address) { return _WETH; }\n    function totalFee() external view override returns (uint256) { return _totalFee; }\n\n    // ------------- Pair address calc helper -------------\n    function _getPairAddress(address token_) private view returns(address) {\n        return UniswapV2Library.pairFor(_uniswapV2Factory, token_, _WETH);\n    }\n\n    // ------------- Launch -------------\n    /// @notice Deploy token (full supply to factory) and initialize curve reserves so that:\n    /// - Putting exactly `initialAmmEthAmount_` (GROSS, incl. trade fee) into the curve\n    ///   empties real inventory R, and final curve price equals AMM start price S/T;\n    /// - rEthReserves is enough to fund AMM with S and pay migration fee.\n    function launchToken(\n        string memory name_,\n        string memory symbol_,\n        string memory uri_,\n        uint256 initialAmmEthAmount_, // GROSS ETH expected to be raised on the curve before migration\n        uint256 initialRatio_         // BPS: e.g. 1000 = 10% to AMM\n    ) external payable nonReentrant returns (address tokenAddress) {\n        if (!_config.isInitialized) revert SmthTokenFactory_NotInitialized();\n        if (initialAmmEthAmount_ == 0) revert SmthTokenFactory__ZeroAmount();\n        if (initialRatio_ == 0 || initialRatio_ >= _config.defaultBpsDenominator) {\n            revert SmthTokenFactory_InvalidInitialRatio(initialRatio_, _config.defaultBpsDenominator);\n        }\n        if (_config.tradeFeeBpsNumerator >= _config.defaultBpsDenominator) {\n            revert SmthTokenFactory_TradeFeeTooHigh(_config.tradeFeeBpsNumerator, _config.defaultBpsDenominator);\n        }\n        if (_config.migrationFeeNumerator >= 1e18) {\n            revert SmthTokenFactory_MigrationFeeTooHigh(_config.migrationFeeNumerator);\n        }\n\n        // 1) Deploy token (mints full supply to this factory)\n        SmthToken token = new SmthToken(name_, symbol_, _config.totalSupply);\n\n        // 2) Fill per-token metadata\n        TokenInfo storage info = tokens[address(token)];\n        info.creator = _msgSender();\n        info.tokenAddress = address(token);\n        info.name = name_;\n        info.symbol = symbol_;\n        info.uri = uri_;\n        info.tokenTotalSupply = _config.totalSupply;\n        info.tokenDecimals = _config.tokenDecimals;\n\n        // 3) Initialize curve virtual/real reserves per Solana logic\n        _initReserves(info, initialAmmEthAmount_, initialRatio_);\n\n        emit SmthTokenFactory__TokenLaunched(\n            address(token), name_, symbol_, uri_,\n            info.vEthReserves, info.vTokenReserves,\n            info.rEthReserves, info.rTokenReserves,\n            initialRatio_, initialAmmEthAmount_,\n            _msgSender()\n        );\n\n        // 4) Optional immediate buy with msg.value (same rules as buyToken: fee, partial fill, refund)\n        if (msg.value > 0) {\n            _buyWithValue(address(token), info, _msgSender(), msg.value);\n            if (info.rTokenReserves == 0 && !info.isCompleted) {\n                info.isCompleted = true;\n                finalizeAndMigrate(address(token), info.ammTokenReserves);\n            }\n        }\n\n        return address(token);\n    }\n\n    // ------------- Curve math helpers -------------\n\n    /// @dev Compute and set reserves so that:\n    /// (vS + SS)/(vT - R) = S/T  and  vS*vT = (vS+SS)*(vT - R),\n    /// where SS = netFromGross(GROSS), S = floor(SS / (1+m)).\n    /// Writes directly into `info` to avoid stacking too many locals in caller.\n    function _initReserves(\n        TokenInfo storage info,\n        uint256 gross,           // initialAmmEthAmount_ (GROSS, incl. trade fee)\n        uint256 initialRatioBps  // share to AMM in BPS\n    ) private {\n        // Split supply\n        uint256 T = (_config.totalSupply * initialRatioBps) / _config.defaultBpsDenominator; // to AMM\n        uint256 R = _config.totalSupply - T;                                                 // curve inventory\n        if (T == 0 || R == 0) revert SmthTokenFactory_InvalidTR(T, R);\n\n        // Net ETH to accumulate on curve before migration (after trade fee)\n        uint256 SS = _netFromGross(gross, _config.defaultBpsDenominator, _config.tradeFeeBpsNumerator);\n        if (SS == 0) revert SmthTokenFactory_NetRaiseZero(gross, _config.tradeFeeBpsNumerator);\n\n        // S = floor( SS / (1 + m) ), m is WAD\n        uint256 onePlusM = 1e18 + _config.migrationFeeNumerator;\n        uint256 S = FixedPointMathLib.divWadDown(SS, onePlusM);\n        if (S == 0) revert SmthTokenFactory_BaseRaiseZero(SS, _config.migrationFeeNumerator);\n\n        // Feasibility: S*R > SS*T\n        uint256 SR  = FixedPointMathLib.mulDivDown(S, R, 1);\n        uint256 SST = FixedPointMathLib.mulDivDown(SS, T, 1);\n        if (SR <= SST) revert SmthTokenFactory_IncompatibleGeometry(S, R, SS, T);\n\n        // vT = R * (S*R) / (S*R - SS*T)\n        uint256 den = SR - SST;\n        uint256 vT = FixedPointMathLib.mulDivDown(R, SR, den);\n\n        // vS = SS * (vT - R) / R\n        uint256 vS = FixedPointMathLib.mulDivDown(SS, (vT - R), R);\n        if (vS == 0 || vT <= R) revert SmthTokenFactory_InvalidVirtuals(vS, vT, R);\n\n        // Write reserves\n        info.vEthReserves     = vS;\n        info.vTokenReserves   = vT;\n        info.rEthReserves     = 0;\n        info.rTokenReserves   = R;\n        info.ammTokenReserves = T;\n        info.migrationFee     = 0;\n        info.isCompleted      = false;\n    }\n\n    /// @dev ceil(a/b) for positive integers\n    function _ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /// @dev Given (vS,vT) and net ETH in, return (newS,newT,tokensOut). x*y=k model.\n    function _buyAfterNetEth(uint256 vS, uint256 vT, uint256 ethNet)\n        internal\n        pure\n        returns (uint256 newS, uint256 newT, uint256 tokensOut)\n    {\n        newS = vS + ethNet;\n        newT = (vS * vT) / newS;\n        tokensOut = vT - newT;\n    }\n\n    /// @dev Net ETH required to buy exactly `tokenDelta` (ceil), with current (vS,vT).\n    function _ethForExactTokensBuy(uint256 vS, uint256 vT, uint256 tokenDelta)\n        internal\n        pure\n        returns (uint256 ethNetNeeded, uint256 newS, uint256 newT)\n    {\n        if (tokenDelta == 0 || tokenDelta >= vT) revert SmthTokenFactory_InvalidTokenDelta(tokenDelta, vT);\n        newT = vT - tokenDelta;\n        newS = _ceilDiv(vS * vT, newT);\n        ethNetNeeded = newS - vS;\n    }\n\n    function _netFromGross(uint256 gross, uint256 denom, uint256 feeBps) private pure returns (uint256) {\n        // net = gross * (denom - fee) / denom\n        return (gross * (denom - feeBps)) / denom;\n    }\n\n    function _grossFromNetCeil(uint256 ethNetNeeded, uint256 denom, uint256 feeBps) private pure returns (uint256) {\n        return _ceilDiv(ethNetNeeded * denom, (denom - feeBps));\n    }\n\n    function _fullFillOutcome(\n        uint256 vS,\n        uint256 vT,\n        uint256 ethNet\n    ) internal pure returns (uint256 newS, uint256 newT, uint256 outAmt) {\n        newS = vS + ethNet;\n        newT = (vS * vT) / newS;\n        outAmt = vT - newT;\n    }\n\n    function _forExactTokensBuyAllRemaining(\n        uint256 vS,\n        uint256 vT,\n        uint256 rToken,\n        uint256 bpsDen,\n        uint256 feeBps\n    ) internal pure returns (uint256 ethNetNeeded, uint256 newS, uint256 newT, uint256 ethGrossNeeded) {\n        // _ethForExactTokensBuy(vS, vT, rToken)\n        uint256 _newT = vT - rToken;\n        uint256 _newS = (vS * vT + _newT - 1) / _newT; // ceilDiv\n        uint256 _net  = _newS - vS;\n\n        ethNetNeeded  = _net;\n        newS          = _newS;\n        newT          = _newT;\n        ethGrossNeeded = ( _net * bpsDen + (bpsDen - feeBps) - 1 ) / (bpsDen - feeBps); // grossFromNetCeil\n    }\n\n    // ------------- Trading (with partial fill) -------------\n\n    /// @notice Buy tokens against the curve; if desired amount exceeds curve inventory, perform partial fill and refund surplus ETH.\n    function buyToken(address _token) external payable override nonReentrant {\n        if (msg.value == 0) revert SmthTokenFactory__ZeroAmount();\n        TokenInfo storage info = tokens[_token];\n        if (info.tokenAddress == address(0)) revert SmthTokenFactory__ZeroAddress();\n        _buyWithValue(_token, info, _msgSender(), msg.value);\n        if (info.rTokenReserves == 0 && !info.isCompleted) {\n            info.isCompleted = true;\n            finalizeAndMigrate(_token, info.ammTokenReserves);\n        }\n    }\n\n    /// @notice Sell tokens back to the curve (ceil math to avoid value leakage).\n    function sellToken(address _token, uint256 tokenAmount) external override nonReentrant {\n        if (tokenAmount == 0) revert SmthTokenFactory__ZeroAmount();\n\n        TokenInfo storage info = tokens[_token];\n        if (info.tokenAddress == address(0)) revert SmthTokenFactory__ZeroAddress();\n\n        // newT = vT + ΔT; newS = ceil((vS*vT)/newT)\n        uint256 newReserveToken = info.vTokenReserves + tokenAmount;\n        uint256 numerator = info.vEthReserves * info.vTokenReserves;\n        uint256 newReserveEth = _ceilDiv(numerator, newReserveToken);\n\n        uint256 grossEthOut = info.vEthReserves - newReserveEth;\n        if (grossEthOut == 0) revert SmthTokenFactory_InsufficientOutputAmount(0);\n\n        uint256 fee = (grossEthOut * _config.tradeFeeBpsNumerator) / _config.defaultBpsDenominator;\n        uint256 netEthOut = grossEthOut - fee;\n\n        if (grossEthOut > info.rEthReserves) revert SmthTokenFactory_InsufficientFundsInProtocol();\n        if (address(this).balance < netEthOut) revert SmthTokenFactory_NotEnoughFunds();\n\n        // pull tokens\n        IERC20(_token).safeTransferFrom(_msgSender(), address(this), tokenAmount);\n\n        // state\n        info.vEthReserves = newReserveEth;\n        info.vTokenReserves = newReserveToken;\n        info.rEthReserves -= grossEthOut;\n        info.rTokenReserves += tokenAmount;\n\n        // pay ETH\n        (bool ok, ) = payable(_msgSender()).call{value: netEthOut}(\"\");\n        if (!ok) revert SmthTokenFactory_TransferFailed();\n        _totalFee += fee;\n\n        emit SmthTokenFactory__TokensSold(\n            _token, _msgSender(), tokenAmount, netEthOut,\n            info.vEthReserves, info.vTokenReserves,\n            info.rEthReserves, info.rTokenReserves\n        );\n    }\n\n    // ------------- Internal buy executor (used by launch + buyToken) -------------\n\n    struct BuyCtx {\n        uint256 ethNetMax;\n        uint256 newS;\n        uint256 newT;\n        uint256 outAmt;\n        uint256 ethNetNeeded;\n        uint256 ethGrossNeeded;\n        uint256 refund;\n        uint256 R;\n    }\n\n    function _buyWithValue(address _token, TokenInfo storage info, address buyer, uint256 valueWei) internal {\n        IERC20 tkn = IERC20(_token);\n        BuyCtx memory C;\n\n        // Try full fill with all valueWei\n        {\n            C.ethNetMax = _netFromGross(valueWei, _config.defaultBpsDenominator, _config.tradeFeeBpsNumerator);\n            (C.newS, C.newT, C.outAmt) = _fullFillOutcome(info.vEthReserves, info.vTokenReserves, C.ethNetMax);\n\n            if (C.outAmt <= info.rTokenReserves) {\n                if (C.outAmt == 0) revert SmthTokenFactory_InsufficientOutputAmount(0);\n                uint256 bal = tkn.balanceOf(address(this));\n                if (C.outAmt > bal) revert SmthTokenFactory_FactoryTokenBalanceTooLow(C.outAmt, bal);\n\n                // state\n                info.vEthReserves = C.newS;\n                info.vTokenReserves = C.newT;\n                info.rEthReserves += C.ethNetMax;\n                info.rTokenReserves -= C.outAmt;\n\n                // transfer\n                tkn.safeTransfer(buyer, C.outAmt);\n\n                emit SmthTokenFactory__TokensPurchased(\n                    _token, buyer, C.outAmt, valueWei,\n                    info.vEthReserves, info.vTokenReserves,\n                    info.rEthReserves, info.rTokenReserves\n                );\n\n                _totalFee += (valueWei - C.ethNetMax);\n                return;\n            }\n        }\n\n        // ----- Partial fill -----\n        if (info.rTokenReserves == 0) revert SmthTokenFactory_InsufficientOutputAmount(0);\n\n        (C.ethNetNeeded, C.newS, C.newT, C.ethGrossNeeded) =\n            _forExactTokensBuyAllRemaining(\n                info.vEthReserves,\n                info.vTokenReserves,\n                info.rTokenReserves,\n                _config.defaultBpsDenominator,\n                _config.tradeFeeBpsNumerator\n            );\n\n        if (C.ethGrossNeeded > valueWei) revert SmthTokenFactory_InsufficientEthForPartialFill(C.ethGrossNeeded, valueWei);\n\n        C.R = info.rTokenReserves;\n\n        // state\n        info.vEthReserves = C.newS;\n        info.vTokenReserves = C.newT;\n        info.rEthReserves += C.ethNetNeeded;\n        info.rTokenReserves = 0;\n\n        uint256 bal2 = tkn.balanceOf(address(this));\n        if (C.R > bal2) revert SmthTokenFactory_FactoryTokenBalanceTooLow(C.R, bal2);\n        tkn.safeTransfer(buyer, C.R);\n\n        // refund\n        C.refund = valueWei - C.ethGrossNeeded;\n        if (C.refund > 0) {\n            (bool ok, ) = payable(buyer).call{value: C.refund}(\"\");\n            if (!ok) revert SmthTokenFactory_TransferFailed();\n        }\n\n        emit SmthTokenFactory__TokensPurchased(\n            _token, buyer, C.R, C.ethGrossNeeded,\n            info.vEthReserves, info.vTokenReserves,\n            info.rEthReserves, info.rTokenReserves\n        );\n\n        _totalFee += (C.ethGrossNeeded - C.ethNetNeeded);\n    }\n\n    // ------------- Migration to UniswapV2 (after curve finalization) -------------\n\n    /// @notice Migrate a portion (or all) of `ammTokenReserves` to Uniswap V2 at the current curve price.\n    /// @dev Curve remains active after migration. Migration fee policy is applied on protocol ETH.\n    function finalizeAndMigrate(address _token, uint256 tokenToLP) internal {\n        TokenInfo storage info = tokens[_token];\n        if (info.tokenAddress == address(0)) revert SmthTokenFactory__ZeroAddress();\n\n        if (tokenToLP == 0) revert SmthTokenFactory__ZeroAmount();\n        if (tokenToLP > info.ammTokenReserves) tokenToLP = info.ammTokenReserves;\n\n        if (info.vEthReserves == 0 || info.vTokenReserves == 0) {\n            revert SmthTokenFactory_InvalidVirtualReservesForMigration(info.vEthReserves, info.vTokenReserves);\n        }\n\n        // Keep AMM price == curve price\n        uint256 ethNeeded = (tokenToLP * info.vEthReserves) / info.vTokenReserves;\n\n        // Migration fee (WAD)\n        uint256 fee = ethNeeded.mulWadDown(_config.migrationFeeNumerator);\n\n        // Ensure enough ETH\n        uint256 available = info.rEthReserves;\n        if (available < ethNeeded + fee) {\n            uint256 maxEthForPool = available > fee ? (available - fee) : 0;\n            if (maxEthForPool == 0) revert SmthTokenFactory_NotEnoughFunds();\n            tokenToLP = (tokenToLP * maxEthForPool) / ethNeeded;\n            ethNeeded = maxEthForPool;\n            fee = ethNeeded.mulWadDown(_config.migrationFeeNumerator);\n        }\n        if (tokenToLP == 0 || ethNeeded == 0) revert SmthTokenFactory_NotEnoughFunds();\n\n        IERC20 t = IERC20(_token);\n        uint256 bal = t.balanceOf(address(this));\n        if (bal < tokenToLP) revert SmthTokenFactory_InsufficientTokenBalanceForLP(tokenToLP, bal);\n        t.forceApprove(_uniswapRouter, tokenToLP);\n\n        (uint amountToken, uint amountETH, ) = IUniswapV2Router02(_uniswapRouter).addLiquidityETH{value: ethNeeded}(\n            _token,\n            tokenToLP,\n            (tokenToLP * 9900) / 10_000,\n            (ethNeeded * 9900) / 10_000,\n            address(this),\n            block.timestamp + 1200\n        );\n\n        t.forceApprove(_uniswapRouter, 0);\n\n        info.rEthReserves = info.rEthReserves - amountETH - fee;\n        info.ammTokenReserves -= amountToken;\n        _totalFee += fee;\n        info.migrationFee += fee;\n\n        if (info.ammTokenReserves == 0) {\n            info.liquidityMigrated = true;\n        }\n\n        address craetedUniswapV2Pair = _getPairAddress(_token);\n\n        emit SmthTokenFactory__LiquiditySwapped(_token, craetedUniswapV2Pair, amountToken, amountETH);\n    }\n\n    // ------------- Fees -------------\n    function claimFee(address to) external override onlyOwner {\n        if (to == address(0)) revert SmthTokenFactory__ZeroAddress();\n        uint256 amt = _totalFee;\n        _totalFee = 0;\n        (bool ok, ) = payable(to).call{value: amt}(\"\");\n        if (!ok) revert SmthTokenFactory_TransferFailed();\n        emit SmthTokenFactory__ClaimedFee(amt);\n    }\n\n    // ------------- Receive -------------\n    receive() external payable {}\n}\n"
      },
      "project/contracts/src/interfaces/ISmthTokenFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ISmthTokenFactory\n/// @notice Interface for the Smth Token Factory: launching ERC20-like tokens,\n///         tracking bonding-curve style virtual/real reserves, handling buys/sells,\n///         and migrating liquidity to AMMs.\ninterface ISmthTokenFactory {\n    // -------------------- Errors --------------------\n    error SmthTokenFactory__ZeroAddress();\n    error SmthTokenFactory__ZeroAmount();\n    error SmthTokenFactory_InsufficientOutputAmount(uint256 amount);\n    error SmthTokenFactory_InsufficientFundsInProtocol();\n    error SmthTokenFactory_NotEnoughFunds();\n    error SmthTokenFactory_TransferFailed();\n    error SmthTokenFactory_NotInitialized();\n    error SmthTokenFactory_InvalidBpsDenominator(uint256 bpsDenominator);\n    error SmthTokenFactory_InvalidInitialRatio(uint256 initialRatioBps, uint256 denominator);\n    error SmthTokenFactory_TradeFeeTooHigh(uint256 tradeFeeBps, uint256 denominator);\n    error SmthTokenFactory_MigrationFeeTooHigh(uint256 migrationFeeWad); // must be < 1e18\n    error SmthTokenFactory_InvalidTR(uint256 T, uint256 R); // either is zero\n    error SmthTokenFactory_NetRaiseZero(uint256 gross, uint256 feeBps);\n    error SmthTokenFactory_BaseRaiseZero(uint256 netSS, uint256 migrationFeeWad);\n    error SmthTokenFactory_IncompatibleGeometry(uint256 S, uint256 R, uint256 SS, uint256 T); // requires S*R > SS*T\n    error SmthTokenFactory_InvalidVirtuals(uint256 vS, uint256 vT, uint256 R); // vS>0 && vT>R\n    error SmthTokenFactory_InvalidTokenDelta(uint256 tokenDelta, uint256 vTokenReserves);\n    error SmthTokenFactory_FactoryTokenBalanceTooLow(uint256 required, uint256 actual);\n    error SmthTokenFactory_InsufficientEthForPartialFill(uint256 neededGrossWei, uint256 providedWei);\n    error SmthTokenFactory_InvalidVirtualReservesForMigration(uint256 vS, uint256 vT);\n    error SmthTokenFactory_InsufficientTokenBalanceForLP(uint256 required, uint256 actual);\n\n    // -------------------- Config --------------------\n\n    /// @notice Global configuration used on token launch and fee accounting.\n    /// @dev `migrationFeeNumerator` is a WAD fraction (0..1e18), others are BPS or raw integers.\n    struct Config {\n        /// @notice Total supply to be minted at token launch (18 decimals).\n        uint256 totalSupply;\n\n        /// @notice Migration fee fraction in WAD (e.g., 0.05e18 = 5%).\n        uint256 migrationFeeNumerator;\n\n        /// @notice Trading fee in basis points (e.g., 100 = 1%).\n        uint256 tradeFeeBpsNumerator;\n\n        /// @notice BPS denominator, typically 10_000.\n        uint256 defaultBpsDenominator;\n\n        /// @notice Token decimals (for display/metadata; the math assumes 18 decimals).\n        uint256 tokenDecimals;\n\n        /// @notice Whether the config has been initialized.\n        bool isInitialized;\n    }\n\n    // -------------------- TokenInfo --------------------\n\n    /// @notice Per-token accounting tracked by the factory for bonding-curve math and migration.\n    /// @dev vEthReserves * vTokenReserves = constant product (virtual reserves).\n    struct TokenInfo {\n        /// @notice Original token creator address.\n        address creator;\n\n        /// @notice Launched token address (ERC20-like).\n        address tokenAddress;\n\n        /// @notice Token metadata (not enforced on-chain here).\n        string name;\n        string symbol;\n        string uri;\n\n        /// @notice Total supply and decimals (decimals kept for completeness).\n        uint256 tokenTotalSupply;\n        uint256 tokenDecimals;\n\n        /// @notice Virtual ETH reserve (vS) used by the bonding-curve formulas.\n        uint256 vEthReserves;\n\n        /// @notice Virtual token reserve (vT) used by the bonding-curve formulas.\n        uint256 vTokenReserves;\n\n        /// @notice Real ETH reserve (accumulated ETH the protocol can pay out on sells).\n        uint256 rEthReserves;\n\n        /// @notice Real token reserve (remaining token inventory for sales; increases on user sells).\n        uint256 rTokenReserves;\n\n        /// @notice Initial token reserve in v2 amm protocol.\n        uint256 ammTokenReserves;\n\n        /// @notice Absolute migration fee kept aside from rEthReserves during liquidity migration.\n        uint256 migrationFee;\n\n        /// @notice True once the bonding-curve is completed (e.g., after final mint/migration).\n        bool isCompleted;\n        bool liquidityMigrated;\n    }\n\n    // -------------------- Events --------------------\n\n    /// @notice Emitted once a token is launched and reserves are initialized.\n    event SmthTokenFactory__TokenLaunched(\n        address indexed token,\n        string name,\n        string symbol,\n        string uri,\n        uint256 vReserveEth,\n        uint256 vReserveToken,\n        uint256 rReserveEth,\n        uint256 rReserveToken,\n        uint256 initialRatio,\n        uint256 initialAmmEthAmount,\n        address indexed creator\n    );\n\n    /// @notice Emitted after a successful buy.\n    /// @param token Token address.\n    /// @param buyer Buyer address.\n    /// @param amount Tokens minted to the buyer.\n    /// @param cost ETH paid by the buyer (msg.value).\n    /// @param vReserveEth Updated virtual ETH reserve.\n    /// @param vReserveToken Updated virtual token reserve.\n    /// @param rReserveEth Updated real ETH reserve.\n    /// @param rReserveToken Updated real token reserve.\n    event SmthTokenFactory__TokensPurchased(\n        address indexed token,\n        address indexed buyer,\n        uint256 amount,\n        uint256 cost,\n        uint256 vReserveEth,\n        uint256 vReserveToken,\n        uint256 rReserveEth,\n        uint256 rReserveToken\n    );\n\n    /// @notice Emitted after a successful sell.\n    /// @param token Token address.\n    /// @param seller Seller address.\n    /// @param amount Tokens received from the seller.\n    /// @param refund ETH sent to the seller (after fee).\n    /// @param vReserveEth Updated virtual ETH reserve.\n    /// @param vReserveToken Updated virtual token reserve.\n    /// @param rReserveEth Updated real ETH reserve.\n    /// @param rReserveToken Updated real token reserve.\n    event SmthTokenFactory__TokensSold(\n        address indexed token,\n        address indexed seller,\n        uint256 amount,\n        uint256 refund,\n        uint256 vReserveEth,\n        uint256 vReserveToken,\n        uint256 rReserveEth,\n        uint256 rReserveToken\n    );\n\n    /// @notice Emitted after migrating liquidity to an AMM.\n    event SmthTokenFactory__LiquiditySwapped(\n        address indexed token,\n        address indexed pair,\n        uint256 tokenAmount,\n        uint256 ethAmount\n    );\n\n    /// @notice Emitted after claiming accumulated protocol fees.\n    event SmthTokenFactory__ClaimedFee(uint256 amount);\n\n    // -------------------- Views --------------------\n\n    /// @notice Get per-token info by token address.\n    function tokenInfo(address token) external view returns (TokenInfo memory);\n\n    /// @notice UniswapV2 router address used for liquidity migration.\n    function uniswapRouter() external view returns (address);\n\n    /// @notice UniswapV2 factory address used for pair address calc.\n    function uniswapV2Factory() external view returns (address);\n\n    /// @notice WETH address for the configured router.\n    function WETH() external view returns (address);\n\n    /// @notice Accumulated protocol fees (in ETH).\n    function totalFee() external view returns (uint256);\n\n    // -------------------- Actions --------------------\n\n    /// @notice Launch a new token with bonding-curve parameters baked into virtual/real reserves.\n    /// @dev The function may mint an initial supply and optionally handle an initial buy if msg.value > 0.\n    /// @param name_ Token name (informational).\n    /// @param symbol_ Token symbol (informational).\n    /// @param uri_ Metadata URI (informational).\n    /// @param initialAmmEthAmount_ Initial ETH amount “reserved” for AMM math (sets virtuals).\n    /// @param initialRatio_ Ratio used to split token supply between meteora/real buckets.\n    function launchToken(\n        string memory name_,\n        string memory symbol_,\n        string memory uri_,\n        uint256 initialAmmEthAmount_,\n        uint256 initialRatio_\n    ) external payable returns (address tokenAddress);\n\n    /// @notice Buy tokens for ETH against the bonding curve.\n    function buyToken(address _token) external payable;\n\n    /// @notice Sell tokens for ETH against the bonding curve.\n    function sellToken(address _token, uint256 tokenAmount) external;\n\n    /// @notice Withdraw accumulated protocol fees to `to`.\n    function claimFee(address to) external;\n\n    /// @notice Receive ETH.\n    receive() external payable;\n}\n"
      },
      "project/contracts/src/uniswap-v2/core/interfaces/IUniswapV2Pair.sol": {
        "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
      },
      "project/contracts/src/uniswap-v2/libraries/SafeMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}"
      },
      "project/contracts/src/uniswap-v2/libraries/UniswapV2Library.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"../core/interfaces/IUniswapV2Pair.sol\";\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint160(bytes20(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            )))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}"
      },
      "project/contracts/src/uniswap-v2/periphery/interfaces/IUniswapV2Router01.sol": {
        "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
      },
      "project/contracts/src/uniswap-v2/periphery/interfaces/IUniswapV2Router02.sol": {
        "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
      },
      "project/lib/FixedPointMathLib.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // Divide x * y by the denominator.\n            z := div(mul(x, y), denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // If x * y modulo the denominator is strictly greater than 0,\n            // 1 is added to round up the division of x * y by the denominator.\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let y := x // We start y at x, which will help us make our initial estimate.\n\n            z := 181 // The \"correct\" value is 1, but this saves a multiplication later.\n\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\n\n            // We check y >= 2^(k + 8) but shift right by k bits\n            // each branch to ensure that if x >= 256, then y >= 256.\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\n                y := shr(128, y)\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x1000000000000000000)) {\n                y := shr(64, y)\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x10000000000)) {\n                y := shr(32, y)\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x1000000)) {\n                y := shr(16, y)\n                z := shl(8, z)\n            }\n\n            // Goal was to get z*z*y within a small factor of x. More iterations could\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\n\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\n\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\n\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\n\n            // There is no overflow risk here since y < 2^136 after the first branch above.\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\n\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // If x+1 is a perfect square, the Babylonian method cycles between\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\n            z := sub(z, lt(div(x, z), z))\n        }\n    }\n\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Mod x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            z := mod(x, y)\n        }\n    }\n\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Divide x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            r := div(x, y)\n        }\n    }\n\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Add 1 to x * y if x % y > 0. Note this will\n            // return 0 instead of reverting if y is zero.\n            z := add(gt(mod(x, y), 0), div(x, y))\n        }\n    }\n}"
      }
    }
  }
}